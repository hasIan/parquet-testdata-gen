<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>ParquetTestCaseGen</groupId>
    <artifactId>parquet-testdata-gen</artifactId>
    <version>1.0-SNAPSHOT</version>

    <properties>
        <parquet-version>1.8.1</parquet-version>
        <slf4j-version>1.7.21</slf4j-version>
    </properties>

    <build>
        <plugins>
            <plugin>
                <!-- Exec plugin to run the main program during "mvn test" -->
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>exec-maven-plugin</artifactId>
                <version>1.1.1</version>
                <executions>
                    <execution>
                        <phase>test</phase>
                        <goals>
                            <goal>java</goal>
                        </goals>
                        <configuration>
                            <mainClass>TestFileGenerator</mainClass>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>

    <dependencies>
        <!--
        This is what central wants us to add. It is not enough by itself.

        Without specifying <type> as "pom", Maven looks for a jar file, which
        this isn't; it's a SuperPOM that just aggregates the Parquet
        submodules. However, including it seems to have no effect: if the
        submodules are not explicitly listed as dependencies, the compile
        step shits all over itself, complaining about unknown symbols.
        -->
        <dependency>
            <groupId>org.apache.parquet</groupId>
            <artifactId>parquet</artifactId>
            <version>${parquet-version}</version>
            <type>pom</type>
        </dependency>

        <dependency>
            <groupId>org.apache.hadoop</groupId>
            <artifactId>hadoop-core</artifactId>
            <version>1.1.0</version>    <!--depends on jackson-mapper-asl-1.0.1, which breaks-->
            <!-- <version>1.2.1</version>-->  <!--this links to jackson-mapper-asl-1.8.8, still breaks-->
            <!--
            solution: make the jackson-mapper-asl version match the jackson-core-asl;
            by default v1.9.11 is loaded with parquet-hadoop v1.8.1
            -->
        </dependency>
        <!-- matching the jackson-...-asl library versions -->
        <!--
        <dependency>
            <groupId>org.codehaus.jackson</groupId>
            <artifactId>jackson-core-asl</artifactId>
            <version>1.0.1</version>
        </dependency>
        -->
        <dependency>
            <groupId>org.apache.parquet</groupId>
            <artifactId>parquet-jackson</artifactId>
            <version>${parquet-version}</version>
        </dependency>
        <dependency>
            <groupId>org.apache.parquet</groupId>
            <artifactId>parquet-common</artifactId>
            <version>${parquet-version}</version>
        </dependency>
        <dependency>
            <groupId>org.apache.parquet</groupId>
            <artifactId>parquet-encoding</artifactId>
            <version>${parquet-version}</version>
        </dependency>
        <dependency>
            <groupId>org.apache.parquet</groupId>
            <artifactId>parquet-column</artifactId>
            <version>${parquet-version}</version>
        </dependency>
        <dependency>
            <groupId>org.apache.parquet</groupId>
            <artifactId>parquet-hadoop</artifactId>
            <version>${parquet-version}</version>
            <!--  matching the jackson-...-asl library versions -->
            <!--
            <exclusions>
                <exclusion>
                    <groupId>org.codehaus.jackson</groupId>
                    <artifactId>jackson-core-asl</artifactId>
                </exclusion>
            </exclusions>
            -->
        </dependency>
        <!--
        This is a hack to get rid of the (runtime) warning; not ideal from the
        authors' PoV, because it violates transparency; didn't help.

        Adding the API jar is suggested as a way in some Stack Overflow posts
        to get rid of the implementation not found warning, but this is in
        fact malarkey, at least in this case.
        -->
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>
            <version>${slf4j-version}</version>
        </dependency>
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-simple</artifactId>
            <version>${slf4j-version}</version>
        </dependency>
    </dependencies>

</project>
